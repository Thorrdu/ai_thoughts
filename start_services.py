import os
import sys
import platform
import subprocess
import json
import time
from pathlib import Path

def check_environment():
    """V√©rifie que l'environnement est correctement configur√©."""
    print("üîç V√©rification de l'environnement...")
    
    # V√©rification du fichier de configuration
    if not Path("config.json").exists():
        print("‚ùå Fichier de configuration manquant")
        return False
    
    # V√©rification de l'environnement virtuel
    venv_path = Path("venv")
    if not venv_path.exists():
        print("‚ùå Environnement virtuel manquant")
        return False
    
    # V√©rification des r√©pertoires n√©cessaires
    required_dirs = ["data", "data/vector_store", "logs"]
    for directory in required_dirs:
        if not Path(directory).exists():
            print(f"‚ùå R√©pertoire {directory} manquant")
            return False
    
    print("‚úÖ Environnement v√©rifi√© avec succ√®s")
    return True

def start_ollama():
    """D√©marre le service Ollama."""
    print("\nüöÄ D√©marrage d'Ollama...")
    try:
        # V√©rification si Ollama est d√©j√† en cours d'ex√©cution
        if platform.system() == "Windows":
            result = subprocess.run(
                ["tasklist", "/FI", "IMAGENAME eq ollama.exe"],
                capture_output=True,
                text=True
            )
            if "ollama.exe" in result.stdout:
                print("‚úÖ Ollama est d√©j√† en cours d'ex√©cution")
                return True
        else:
            result = subprocess.run(
                ["pgrep", "ollama"],
                capture_output=True
            )
            if result.returncode == 0:
                print("‚úÖ Ollama est d√©j√† en cours d'ex√©cution")
                return True
        
        # D√©marrage d'Ollama
        if platform.system() == "Windows":
            subprocess.Popen(["ollama", "serve"], 
                           creationflags=subprocess.CREATE_NEW_CONSOLE)
        else:
            subprocess.Popen(["ollama", "serve"])
        
        # Attente du d√©marrage
        time.sleep(2)
        print("‚úÖ Ollama d√©marr√© avec succ√®s")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage d'Ollama: {e}")
        return False

def start_chroma():
    """D√©marre le service ChromaDB."""
    print("\nüöÄ D√©marrage de ChromaDB...")
    try:
        # ChromaDB est un service embarqu√©, donc il n'y a pas besoin de le d√©marrer
        # On v√©rifie juste qu'il peut √™tre import√©
        import chromadb
        print("‚úÖ ChromaDB pr√™t")
        return True
    except ImportError:
        print("‚ùå ChromaDB non install√©")
        return False

def check_services():
    """V√©rifie que tous les services sont en cours d'ex√©cution."""
    print("\nüîç V√©rification des services...")
    
    # V√©rification d'Ollama
    try:
        subprocess.run(["ollama", "list"], check=True, capture_output=True)
        print("‚úÖ Service Ollama: OK")
    except subprocess.CalledProcessError:
        print("‚ùå Service Ollama: Erreur")
        return False
    
    # V√©rification de ChromaDB
    try:
        import chromadb
        client = chromadb.Client()
        print("‚úÖ Service ChromaDB: OK")
    except Exception as e:
        print(f"‚ùå Service ChromaDB: Erreur ({e})")
        return False
    
    return True

def main():
    print("üöÄ D√©marrage des services...")
    
    if not check_environment():
        print("\n‚ùå L'environnement n'est pas correctement configur√©")
        return
    
    if not start_ollama():
        print("\n‚ùå Impossible de d√©marrer Ollama")
        return
    
    if not start_chroma():
        print("\n‚ùå Impossible de d√©marrer ChromaDB")
        return
    
    if check_services():
        print("\n‚ú® Tous les services sont en cours d'ex√©cution!")
        print("\nPour arr√™ter les services, appuyez sur Ctrl+C")
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\n\nüëã Arr√™t des services...")
            sys.exit(0)
    else:
        print("\n‚ùå Certains services ne fonctionnent pas correctement")

if __name__ == "__main__":
    main() 